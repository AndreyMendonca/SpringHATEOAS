package com.spring.rest.controller;

import java.util.ArrayList;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.spring.domain.entity.Product;
import com.spring.rest.controller.DTO.ProductDTO;
import com.spring.service.ProductService;

@RestController
@RequestMapping("api/hateoas/p")
public class HProductController {
	@Autowired
	private ProductService service;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public ProductDTO save(@RequestBody Product product) {
		
		ProductDTO dto = service.save(product);

        
        dto.getLinkss().add(new CustomLink("product", WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(ClientController.class).findById(c.getId())).toUri().toString(), "GET"));
        dto.getLinkss().add(new CustomLink("product", WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(ClientController.class).delete(c.getId())).toUri().toString(), "DELETE"));
   
		
		return dto;
	}
	
	@GetMapping("/{id}")
	public ProductDTO findById(@PathVariable Long id) {
		return service.findById(id)
				.map(product -> {
					ProductDTO dto = modelMapper.map(product, ProductDTO.class);
					return dto;
				})
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Product not found id: " + id));
	}
	
	@GetMapping
	public List<ProductDTO> findAll(){
		List<Product> products = service.findAll();
		
		List<ProductDTO> productsDTOS = new ArrayList<>();
		for(Product p : products) {
			productsDTOS.add(modelMapper.map(p, ProductDTO.class));
		}
		
		return productsDTOS;
	}
}
